package ${package}.${moduleName}.controller;

import java.util.*;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;

import ${mainPath}.common.exception.GolbalException;
import ${mainPath}.common.api.CommonResult;
import ${mainPath}.common.mybatis.vo.PageVo;
import ${mainPath}.common.mybatis.dto.CommonDto;
import ${mainPath}.common.annotation.AutoLog;

import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.I${className}Service;
import javax.validation.Valid;



/**
 * ${comments}接口
 *
 * @Author ${author}
 * @Date  ${datetime}
 */
@Slf4j
@Api(value = "${comments}接口", tags = {"${comments}接口"})
@RestController
@RequestMapping("${moduleName}/${pathName}")
public class ${className}Controller {
    @Autowired
    private I${className}Service ${classname}Service;


    /**
    * ${comments}列表
    *
    * @return
    */
    @AutoLog(value = "${comments}-分页列表查询")
    @ApiOperation(value = "${comments}分页列表", notes = "${comments}分页列表")
    @GetMapping("/list")
    @RequiresPermissions("${moduleName}/${pathName}/list")
    public CommonResult<PageVo<${className}>> treeGrid(CommonDto commonDto) {
        PageVo<${className}> page = ${classname}Service.pageList(commonDto);
        return CommonResult.success(page);
    }

    /**
     * 获取${comments}信息
     */
    @AutoLog(value = "${comments}-获取${comments}信息")
    @ApiOperation(value = "获取${comments}信息", notes = "获取${comments}信息")
    @ApiImplicitParam(paramType = "path", name = "${pk.attrname}", value = "主键ID", dataType = "${pk.attrType}", required = true)
    @GetMapping("/info/{${pk.attrname}}")
    @RequiresPermissions("${moduleName}/${pathName}/info")
    public CommonResult<${className}> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
        ${className} ${classname} = ${classname}Service.getById(${pk.attrname});
        return CommonResult.success(${classname});
    }

    /**
     * 保存${comments}信息
     */
    @AutoLog(value = "${comments}-保存${comments}信息")
    @ApiOperation(value = "保存${comments}信息", notes = "保存${comments}信息")
    @PostMapping("/save")
    @RequiresPermissions("${moduleName}/${pathName}/save")
    public CommonResult save(@Valid @RequestBody ${className} ${classname}) {
        try {
            ${classname}.setCreateTime(new Date());
            ${classname}.setUpdateTime(new Date());
            ${classname}Service.save(${classname});
            return CommonResult.success("添加成功");
        } catch (Exception e) {
            log.error(e.getMessage());
            throw new GolbalException("运行异常，请联系管理员");
        }
    }

    /**
     * 修改${comments}信息
     */
    @AutoLog(value = "${comments}-修改${comments}信息")
    @ApiOperation(value = "修改${comments}信息", notes = "修改${comments}信息")
    @PostMapping("/update")
    @RequiresPermissions("${moduleName}/${pathName}/update")
    public CommonResult update(@Valid @RequestBody ${className} ${classname}) {
        try {
            ${classname}.setUpdateTime(new Date());
            ${classname}Service.updateById(${classname});
            return CommonResult.success("修改成功");
        } catch (Exception e) {
            log.error(e.getMessage());
            throw new GolbalException("运行异常，请联系管理员");
        }
    }

    /**
     * 删除${comments}信息
     */
    @AutoLog(value = "${comments}-删除${comments}信息")
    @ApiOperation(value = "删除${comments}信息", notes = "删除${comments}信息")
    @ApiImplicitParam(paramType = "query", name = "${pk.attrname}s", value = "ID数组", dataType = "${pk.attrType}", required = true, allowMultiple = true)
    @PostMapping("/delete")
    @RequiresPermissions("${moduleName}/${pathName}/delete")
    public CommonResult delete(@RequestBody ${pk.attrType}[]${pk.attrname}s) {
        try {
            ${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));
            return CommonResult.success("删除成功");
        } catch (Exception e) {
            log.error(e.getMessage());
            throw new GolbalException("运行异常，请联系管理员");
        }
    }
}
